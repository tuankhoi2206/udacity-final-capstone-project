{"ast":null,"code":"import * as React from 'react';\n\nvar getWindowEvent = function getWindowEvent(target) {\n  if (target) {\n    var _ownerDocument$defaul, _ownerDocument, _ownerDocument$defaul2;\n\n    if (typeof target.window === 'object' && target.window === target) {\n      return target.event;\n    }\n\n    return (_ownerDocument$defaul = (_ownerDocument = target.ownerDocument) == null ? void 0 : (_ownerDocument$defaul2 = _ownerDocument.defaultView) == null ? void 0 : _ownerDocument$defaul2.event) != null ? _ownerDocument$defaul : undefined;\n  }\n\n  return undefined;\n};\n\nvar isActionSupported = function isActionSupported(element, method) {\n  return element ? !!element[method] : false;\n};\n\nexport var useEventListener = function useEventListener(options) {\n  var capture = options.capture,\n      listener = options.listener,\n      type = options.type,\n      target = options.target,\n      targetRef = options.targetRef;\n  var latestListener = React.useRef(listener);\n  latestListener.current = listener;\n  var eventHandler = React.useCallback(function (event) {\n    return latestListener.current(event);\n  }, []);\n  var timeoutId = React.useRef(undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(function () {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(function () {\n    var element = typeof targetRef === 'undefined' ? target : targetRef.current; // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n\n    var currentEvent = getWindowEvent(window);\n\n    var conditionalHandler = function conditionalHandler(event) {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.');\n    } // @ts-ignore We have a collision between types from DOM and @types/node\n\n\n    timeoutId.current = setTimeout(function () {\n      currentEvent = undefined;\n    }, 1);\n    return function () {\n      clearTimeout(timeoutId.current);\n      currentEvent = undefined;\n\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error('@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.');\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};","map":{"version":3,"sources":["useEventListener.ts"],"names":["getWindowEvent","target","isActionSupported","element","useEventListener","capture","listener","type","targetRef","options","latestListener","React","eventHandler","timeoutId","process","currentEvent","conditionalHandler","event","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport { EventHandler, EventListenerOptions, EventTypes, Target } from './types';\n\nconst getWindowEvent = (target: Target): Event | undefined => {\n  if (target) {\n    if (typeof (target as Window).window === 'object' && (target as Window).window === target) {\n      return target.event;\n    }\n\n    return (target as Node).ownerDocument?.defaultView?.event ?? undefined;\n  }\n\n  return undefined;\n};\n\nconst isActionSupported = (\n  element: Target | null | undefined,\n  method: 'addEventListener' | 'removeEventListener',\n): element is Target => (element ? !!element[method] : false);\n\nexport const useEventListener = <T extends EventTypes>(options: EventListenerOptions<T>): void => {\n  const { capture, listener, type, target, targetRef } = options;\n\n  const latestListener = React.useRef<EventHandler<T>>(listener);\n  latestListener.current = listener;\n\n  const eventHandler = React.useCallback((event: DocumentEventMap[T]) => {\n    return latestListener.current(event);\n  }, []);\n\n  const timeoutId = React.useRef<number | undefined>(undefined);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // This is fine to violate there conditional rule as environment variables will never change during component\n    // lifecycle\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (typeof target !== 'undefined' && typeof targetRef !== 'undefined') {\n        throw new Error('`target` and `targetRef` props are mutually exclusive, please use one of them.');\n      }\n\n      if (typeof target === 'undefined' && typeof targetRef === 'undefined') {\n        throw new Error(\"`target` and `targetRef` props are `undefined`, it' required to use one of them.\");\n      }\n    }, [target, targetRef]);\n  }\n\n  React.useEffect(() => {\n    const element: Target | null | undefined = typeof targetRef === 'undefined' ? target : targetRef.current;\n\n    // Store the current event to avoid triggering handlers immediately\n    // Note this depends on a deprecated but extremely well supported quirk of the web platform\n    // https://github.com/facebook/react/issues/20074\n    let currentEvent = getWindowEvent(window);\n\n    const conditionalHandler = (event: DocumentEventMap[T]) => {\n      // Skip if this event is the same as the one running when we added the handlers\n      if (event === currentEvent) {\n        currentEvent = undefined;\n        return;\n      }\n\n      eventHandler(event);\n    };\n\n    if (isActionSupported(element, 'addEventListener')) {\n      element.addEventListener(type, conditionalHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `addEventListener()` method.',\n      );\n    }\n\n    // @ts-ignore We have a collision between types from DOM and @types/node\n    timeoutId.current = setTimeout(() => {\n      currentEvent = undefined;\n    }, 1);\n\n    return () => {\n      clearTimeout(timeoutId.current);\n      currentEvent = undefined;\n\n      if (isActionSupported(element, 'removeEventListener')) {\n        element.removeEventListener(type, conditionalHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          '@fluentui/react-component-event-listener: Passed `element` is not valid or does not support `removeEventListener()` method.',\n        );\n      }\n    };\n  }, [capture, eventHandler, target, targetRef, type]);\n};\n"]},"metadata":{},"sourceType":"module"}